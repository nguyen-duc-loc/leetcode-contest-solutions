// Generated by LeetCodeContestHelper at 5/12/2024, 9:53:41 AM
// 100281. Maximum Difference Score in a Grid
// https://leetcode.com/contest/weekly-contest-397/problems/maximum-difference-score-in-a-grid/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int conv(int i, int j, int n) {
        return i * n + j;
    }

    int maxScore(vector<vector<int>>& grid) {
        int m = (int)grid.size(), n = (int)grid.front().size();
        vector<int> dp(m * n, INT_MIN);
        dp[0] = 0;
        int ans = INT_MIN;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0)
                    continue;
                int pos = conv(i, j, n);
                for (int k = 0; k < i; k++) {
                    dp[pos] = max(dp[pos],
                                  dp[conv(k, j, n)] + grid[i][j] - grid[k][j]);
                }
                for (int k = 0; k < j; k++) {
                    dp[pos] = max(dp[pos],
                                  dp[conv(i, k, n)] + grid[i][j] - grid[i][k]);
                }
                ans = max(ans, dp[pos]);
                dp[pos] = max(dp[pos], 0);
            }
        }
        return ans;
    }
};

// int Solution::maxScore(vector<vector<int>> grid)

int main() {
    cout << "*** 100281. Maximum Difference Score in a Grid ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<vector<int>> grid = {
            {9, 5, 7, 3}, {8, 9, 6, 1}, {6, 7, 14, 3}, {2, 5, 3, 1}};
        int ans0 = s0.maxScore(grid);
        int exp0 = 9;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<vector<int>> grid = {{4, 3, 2}, {3, 2, 1}};
        int ans1 = s0.maxScore(grid);
        int exp1 = -1;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
