// Generated by LeetCodeContestHelper at 5/12/2024, 11:43:07 AM
// 3149. Find the Minimum Cost Array Permutation
// https://leetcode.com/contest/weekly-contest-397/problems/find-the-minimum-cost-array-permutation/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    vector<int> ans;

    void dfs(int cur, int j, int index, vector<int>& a, int n,
             vector<vector<vector<int>>>& dp, vector<int>& nums) {
        if (index == j) {
            ranges::reverse(a);
            if (ans.empty() || a < ans) {
                ans = a;
            }
            ranges::reverse(a);
            return;
        }
        for (int k = 0; k < n; k++) {
            if (!(cur & (1 << k)))
                continue;
            if (dp[cur][k][j] != INT_MAX &&
                dp[cur][k][j] + abs(k - nums[index]) ==
                    dp[cur | (1 << index)][index][j]) {
                a.push_back(k);
                dfs(cur ^ (1 << k), j, k, a, n, dp, nums);
                a.pop_back();
            }
        }
    }

    vector<int> findPermutation(vector<int>& nums) {
        int n = (int)nums.size();
        ans.clear();
        vector<vector<vector<int>>> dp(
            1 << n, vector<vector<int>>(n, vector<int>(n, INT_MAX)));
        for (int i = 0; i < n; i++) {
            dp[1 << i][i][i] = 0;
        }
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (dp[i][j][k] == INT_MAX)
                        continue;
                    for (int l = 0; l < n; l++) {
                        if (!(i & (1 << l))) {
                            dp[i | (1 << l)][l][k] =
                                min(dp[i | (1 << l)][l][k],
                                    dp[i][j][k] + abs(j - nums[l]));
                        }
                    }
                }
            }
        }
        int mn = INT_MAX;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j)
                    continue;
                mn = min(mn, dp[(1 << n) - 1][i][j] + abs(i - nums[j]));
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j)
                    continue;
                if (dp[(1 << n) - 1][i][j] + abs(i - nums[j]) != mn)
                    continue;
                vector<int> a = {i};
                int index = i, cur = ((1 << n) - 1) ^ (1 << i);
                dfs(cur, j, index, a, n, dp, nums);
            }
        }
        return ans;
    }
};

// vector<int> Solution::findPermutation(vector<int> nums)

int main() {
    cout << "*** 3149. Find the Minimum Cost Array Permutation ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> nums = {1, 0, 2};
        vector<int> ans0 = s0.findPermutation(nums);
        vector<int> exp0 = {0, 1, 2};

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: ";
            for (int& i : ans0) {
                cout << i << " ";
            }
            cout << endl << "  Expect: ";
            for (int& i : exp0) {
                cout << i << " ";
            }
            cout << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> nums = {0, 2, 1};
        vector<int> ans1 = s0.findPermutation(nums);
        vector<int> exp1 = {0, 2, 1};

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: ";
            for (int& i : ans1) {
                cout << i << " ";
            }
            cout << endl << "  Expect: ";
            for (int& i : exp1) {
                cout << i << " ";
            }
            cout << endl;
        }
    }

    return 0;
}
