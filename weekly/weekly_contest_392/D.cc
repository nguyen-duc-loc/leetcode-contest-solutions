// Generated by LeetCodeContestHelper at 4/30/2024, 3:32:08 AM
// 3108. Minimum Cost Walk in Weighted Graph
// https://leetcode.com/contest/weekly-contest-392/problems/minimum-cost-walk-in-weighted-graph/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
 public:
  vector<int> sz;
  vector<int> link;
  vector<int> val;

  int find(int a) {
    while (a != link[a]) {
      a = link[a];
    }
    return a;
  }

  bool same(int a, int b) {
    return find(a) == find(b);
  }

  void unite(int a, int b) {
    a = find(a);
    b = find(b);
    if (sz[a] < sz[b])
      swap(a, b);
    sz[a] += sz[b];
    link[b] = a;
  }

  vector<int> minimumCost(int n, vector<vector<int>>& edges,
                          vector<vector<int>>& query) {
    sz.clear();
    link.clear();
    val.clear();
    sz.resize(n, 1);
    link.resize(n);
    val.resize(n, -1);
    for (int i = 0; i < n; i++) {
      link[i] = i;
    }
    for (auto& e : edges) {
      int a = find(e[0]);
      int b = find(e[1]);
      if (a != b) {
        int v1 = val[a];
        int v2 = val[b];
        val[a] &= v2;
        val[b] &= v1;
        unite(e[0], e[1]);
      }
      val[a] &= e[2];
      val[b] &= e[2];
    }
    vector<int> ans;
    for (auto& e : query) {
      if (e[0] == e[1]) {
        ans.push_back(0);
      } else {
        int a = find(e[0]);
        int b = find(e[1]);
        if (a != b) {
          ans.push_back(-1);
        } else {
          ans.push_back(val[a]);
        }
      }
    }
    return ans;
  }
};

// vector<int> Solution::minimumCost(int n, vector<vector<int>> edges,
// vector<vector<int>> query)

int main() {
  cout << "*** 3108. Minimum Cost Walk in Weighted Graph ***" << endl << endl;

  Solution s0;

  {
    cout << "Test 1: ";

    int n = 5;
    vector<vector<int>> edges = {{0, 1, 7}, {1, 3, 7}, {1, 2, 1}};
    vector<vector<int>> query = {{0, 3}, {3, 4}};
    vector<int> ans0 = s0.minimumCost(n, edges, query);
    vector<int> exp0 = {1, -1};

    if (ans0 == exp0) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: ";
      for (int& i : ans0) {
        cout << i << " ";
      }
      cout << endl << "  Expect: ";
      for (int& i : exp0) {
        cout << i << " ";
      }
      cout << endl;
    }
  }

  {
    cout << "Test 2: ";

    int n = 3;
    vector<vector<int>> edges = {{0, 2, 7}, {0, 1, 15}, {1, 2, 6}, {1, 2, 1}};
    vector<vector<int>> query = {{1, 2}};
    vector<int> ans1 = s0.minimumCost(n, edges, query);
    vector<int> exp1 = {0};

    if (ans1 == exp1) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: ";
      for (int& i : ans1) {
        cout << i << " ";
      }
      cout << endl << "  Expect: ";
      for (int& i : exp1) {
        cout << i << " ";
      }
      cout << endl;
    }
  }

  return 0;
}
