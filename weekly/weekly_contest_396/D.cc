// Generated by LeetCodeContestHelper at 5/5/2024, 10:29:30 AM
// 100288. Minimum Cost to Equalize Array
// https://leetcode.com/contest/weekly-contest-396/problems/minimum-cost-to-equalize-array/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    const long long mod = (long long)1e9 + 7;

    int minCostToEqualizeArray(vector<int>& nums, int cost1, int cost2) {
        int mx = *max_element(nums.begin(), nums.end()), n = (int)nums.size();
        long long ans = 0;
        if (2 * cost1 <= cost2) {
            for (auto& e : nums) {
                ans += 1LL * cost1 * (mx - e);
            }
        } else {
            vector<long long> v;
            for (auto& e : nums) {
                v.push_back(1LL * (mx - e));
            }
            sort(v.begin(), v.end());
            long long s = accumulate(v.begin(), v.end(), 0);
            long long s2 = v.back();
            long long s1 = s - s2;
            ans = LLONG_MAX;
            for (int i = 0; i <= mx; i++) {
                if (s2 >= s1) {
                    ans = min(ans, s1 * cost2 + (s2 - s1) * cost1);
                } else {
                    ans = min(ans,
                              (s1 + s2) / 2 * cost2 + ((s1 + s2) % 2) * cost1);
                }
                s2++;
                s1 += n - 1;
            }
        }
        return ans % mod;
    }
};

// int Solution::minCostToEqualizeArray(vector<int> nums, int cost1, int cost2)

int main() {
    cout << "*** 100288. Minimum Cost to Equalize Array ***" << endl << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> nums = {4, 1};
        int cost1 = 5;
        int cost2 = 2;
        int ans0 = s0.minCostToEqualizeArray(nums, cost1, cost2);
        int exp0 = 15;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> nums = {2, 3, 3, 3, 5};
        int cost1 = 2;
        int cost2 = 1;
        int ans1 = s0.minCostToEqualizeArray(nums, cost1, cost2);
        int exp1 = 6;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        vector<int> nums = {3, 5, 3};
        int cost1 = 1;
        int cost2 = 3;
        int ans2 = s0.minCostToEqualizeArray(nums, cost1, cost2);
        int exp2 = 4;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    {
        cout << "Test 4: ";

        vector<int> nums = {1, 14, 14, 15};
        int cost1 = 2;
        int cost2 = 1;
        int ans2 = s0.minCostToEqualizeArray(nums, cost1, cost2);
        int exp2 = 20;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    {
        cout << "Test 5: ";

        vector<int> nums = {4, 3, 1, 8};
        int cost1 = 5;
        int cost2 = 1;
        int ans2 = s0.minCostToEqualizeArray(nums, cost1, cost2);
        int exp2 = 8;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    {
        cout << "Test 6: ";

        vector<int> nums = {2, 12, 24};
        int cost1 = 49;
        int cost2 = 4;
        int ans2 = s0.minCostToEqualizeArray(nums, cost1, cost2);
        int exp2 = 128;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    {
        cout << "Test 7: ";

        vector<int> nums = {60, 19, 53, 31, 57};
        int cost1 = 60;
        int cost2 = 2;
        int ans2 = s0.minCostToEqualizeArray(nums, cost1, cost2);
        int exp2 = 90;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}
