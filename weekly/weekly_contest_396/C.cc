// Generated by LeetCodeContestHelper at 5/5/2024, 9:50:00 AM
// 100283. Minimum Length of Anagram Concatenation
// https://leetcode.com/contest/weekly-contest-396/problems/minimum-length-of-anagram-concatenation/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int minAnagramLength(string s) {
        int n = (int)s.size();
        vector<vector<int>> pref(n + 1, vector<int>(26));
        for (int i = 1; i <= n; i++) {
            pref[i] = pref[i - 1];
            char c = s[i - 1];
            pref[i][c - 'a']++;
        }
        int ans = n;
        for (int i = 1; i <= (int)sqrt(n); i++) {
            if (n % i == 0) {
                vector<int> v = pref[i];
                bool ok = 1;
                for (int j = i; j <= n; j += i) {
                    vector<int> v2(26);
                    for (int k = 0; k < 26; k++) {
                        v2[k] = pref[j][k] - pref[j - i][k];
                    }
                    if (v2 != v) {
                        ok = 0;
                        break;
                    }
                }
                if (ok) {
                    ans = min(ans, i);
                }
                v = pref[n / i];
                ok = 1;
                for (int j = n / i; j <= n; j += n / i) {
                    vector<int> v2(26);
                    for (int k = 0; k < 26; k++) {
                        v2[k] = pref[j][k] - pref[j - n / i][k];
                    }
                    if (v2 != v) {
                        ok = 0;
                        break;
                    }
                }
                if (ok) {
                    ans = min(ans, n / i);
                }
            }
        }
        return ans;
    }
};

// int Solution::minAnagramLength(string s)

int main() {
    cout << "*** 100283. Minimum Length of Anagram Concatenation ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        string s = "abba";
        int ans0 = s0.minAnagramLength(s);
        int exp0 = 2;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        string s = "cdef";
        int ans1 = s0.minAnagramLength(s);
        int exp1 = 4;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
