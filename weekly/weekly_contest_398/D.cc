// Generated by LeetCodeContestHelper at 5/19/2024, 11:39:14 AM
// 3154. Find Number of Ways to Reach the K-th Stair
// https://leetcode.com/contest/weekly-contest-398/problems/find-number-of-ways-to-reach-the-k-th-stair/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

const int MOD = 1e9 + 7;

long long mul(long long a, long long b) {
    return a * b % MOD;
}

long long power(long long base, long long exp = MOD - 2) {
    long long res = 1, y = base;
    while (exp) {
        if (exp & 1)
            res = mul(res, y);
        y = mul(y, y);
        exp >>= 1;
    }
    return res;
}

struct Math {
    vector<long long> fact, inv;

    Math(int n = 1) {
        fact.resize(n + 1);
        inv.resize(n + 1);
        fact[0] = inv[0] = 1;
        for (int i = 1; i <= n; i++)
            fact[i] = mul(fact[i - 1], i);
        inv[n] = power(fact[n]);
        for (int i = n; i > 1; i--)
            inv[i - 1] = mul(inv[i], i);
    }

    long long comb(int n, int k) {
        if (n < k)
            return 0;
        return mul(mul(fact[n], inv[k]), inv[n - k]);
    }

    long long perm(int n, int k) {
        if (n < k)
            return 0;
        return mul(fact[n], inv[n - k]);
    }

    long long multi(vector<int> v) {
        long long res = fact[accumulate(v.begin(), v.end(), 0)];
        for (int i : v)
            res = mul(res, inv[i]);
        return res;
    }

} math(100005);

class Solution {
   public:
    int waysToReachStair(int k) {
        long long ans = 0;
        for (long long i = 0;; i++) {
            int x = (int)((1LL << (i + 1)) - k);
            if (x < 0)
                continue;
            if (x > (int)(i + 2))
                break;
            ans += math.comb((int)(i + 2), x);
        }
        return ans + (k <= 1);
    }
};

// int Solution::waysToReachStair(int k)

int main() {
    cout << "*** 3154. Find Number of Ways to Reach the K-th Stair ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        int k = 0;
        int ans0 = s0.waysToReachStair(k);
        int exp0 = 2;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        int k = 1;
        int ans1 = s0.waysToReachStair(k);
        int exp1 = 4;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
