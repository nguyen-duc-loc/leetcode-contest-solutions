// Generated by LeetCodeContestHelper at 4/30/2024, 3:33:43 AM
// 3122. Minimum Number of Operations to Satisfy Conditions
// https://leetcode.com/contest/weekly-contest-394/problems/minimum-number-of-operations-to-satisfy-conditions/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int minimumOperations(vector<vector<int>>& grid) {
        int m = (int)grid.size(), n = (int)grid[0].size();
        vector<vector<int>> count(n, vector<int>(10));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                count[i][grid[j][i]]++;
            }
        }
        vector<vector<int>> dp(n, vector<int>(10, INT_MAX));
        for (int i = 0; i < 10; i++) {
            dp[0][i] = m - count[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 10; j++) {
                for (int k = 0; k < 10; k++) {
                    if (j != k) {
                        dp[i][j] =
                            min(dp[i][j], dp[i - 1][k] + m - count[i][j]);
                    }
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < 10; i++) {
            ans = min(ans, dp[n - 1][i]);
        }
        return ans;
    }
};

// int Solution::minimumOperations(vector<vector<int>> grid)

int main() {
    cout << "*** 3122. Minimum Number of Operations to Satisfy Conditions ***"
         << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<vector<int>> grid = {{1, 0, 2}, {1, 0, 2}};
        int ans0 = s0.minimumOperations(grid);
        int exp0 = 0;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<vector<int>> grid = {{1, 1, 1}, {0, 0, 0}};
        int ans1 = s0.minimumOperations(grid);
        int exp1 = 3;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        vector<vector<int>> grid = {{1}, {2}, {3}};
        int ans2 = s0.minimumOperations(grid);
        int exp2 = 2;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}
