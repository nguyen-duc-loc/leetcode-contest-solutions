// Generated by LeetCodeContestHelper at 4/30/2024, 3:21:29 AM
// 3072. Distribute Elements Into Two Arrays II
// https://leetcode.com/contest/weekly-contest-387/problems/distribute-elements-into-two-arrays-ii/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

template <typename T>
struct ordered_multiset {
  ordered_set<pair<T, int>> ost;
  map<T, int> freq;

  void insert(T val) {
    ost.insert(make_pair(val, ++freq[val]));
  }

  void erase(T val) {
    ost.erase(make_pair(val, freq[val]--));
  }

  int order_of_key(T val) {
    return ost.order_of_key(make_pair(val, -1));
  }

  T find_by_order(T val) {
    return ost.find_by_order(val)->first;
  }

  T bisect_left(T val) {
    auto it = ost.lower_bound(make_pair(val, -1));
    return it == ost.end() ? ost.size() : ost.order_of_key(*it);
  }

  T bisect_right(T val) {
    auto it = ost.lower_bound(make_pair(val, 1000000000));
    return it == ost.end() ? ost.size() : ost.order_of_key(*it);
  }

  int size() {
    return ost.size();
  }

  bool empty() {
    return ost.empty();
  }
};

class Solution {
 public:
  vector<int> resultArray(vector<int>& nums) {
    ordered_multiset<int> st1;
    ordered_multiset<int> st2;
    int n = (int)nums.size();
    vector<int> check(n);
    st1.insert(nums[0]);
    st2.insert(nums[1]);
    check[0] = 1;
    check[1] = 2;
    int c1 = 1, c2 = 1;
    for (int i = 2; i < n; i++) {
      int t1 = st1.size() - st1.bisect_right(nums[i]);
      int t2 = st2.size() - st2.bisect_right(nums[i]);
      if (t1 > t2) {
        st1.insert(nums[i]);
        c1++;
        check[i] = 1;
      } else if (t1 < t2) {
        st2.insert(nums[i]);
        c2++;
        check[i] = 2;
      } else {
        if (c1 <= c2) {
          st1.insert(nums[i]);
          c1++;
          check[i] = 1;
        } else {
          st2.insert(nums[i]);
          c2++;
          check[i] = 2;
        }
      }
    }
    vector<int> ans;
    for (int i = 0; i < n; i++) {
      if (check[i] == 1)
        ans.push_back(nums[i]);
    }
    for (int i = 0; i < n; i++) {
      if (check[i] == 2)
        ans.push_back(nums[i]);
    }
    return ans;
  }
};

// vector<int> Solution::resultArray(vector<int> nums)

int main() {
  cout << "*** 3072. Distribute Elements Into Two Arrays II ***" << endl
       << endl;

  Solution s0;

  {
    cout << "Test 1: ";

    vector<int> nums = {2, 1, 3, 3};
    vector<int> ans0 = s0.resultArray(nums);
    vector<int> exp0 = {2, 3, 1, 3};

    if (ans0 == exp0) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: ";
      for (int& i : ans0) {
        cout << i << " ";
      }
      cout << endl << "  Expect: ";
      for (int& i : exp0) {
        cout << i << " ";
      }
      cout << endl;
    }
  }

  {
    cout << "Test 2: ";

    vector<int> nums = {5, 14, 3, 1, 2};
    vector<int> ans1 = s0.resultArray(nums);
    vector<int> exp1 = {5, 3, 1, 2, 14};

    if (ans1 == exp1) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: ";
      for (int& i : ans1) {
        cout << i << " ";
      }
      cout << endl << "  Expect: ";
      for (int& i : exp1) {
        cout << i << " ";
      }
      cout << endl;
    }
  }

  {
    cout << "Test 3: ";

    vector<int> nums = {3, 3, 3, 3};
    vector<int> ans2 = s0.resultArray(nums);
    vector<int> exp2 = {3, 3, 3, 3};

    if (ans2 == exp2) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: ";
      for (int& i : ans2) {
        cout << i << " ";
      }
      cout << endl << "  Expect: ";
      for (int& i : exp2) {
        cout << i << " ";
      }
      cout << endl;
    }
  }

  return 0;
}
