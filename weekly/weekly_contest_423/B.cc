// Generated by LeetCodeContestHelper at 11/10/2024, 9:41:25 AM
// 100463. Adjacent Increasing Subarrays Detection II
// https://leetcode.com/contest/weekly-contest-423/problems/adjacent-increasing-subarrays-detection-ii/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int maxIncreasingSubarrays(vector<int>& nums) {
        int n = (int)nums.size();
        vector<int> dp(n, 1);
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                dp[i] = dp[i - 1] + 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int l = dp[i];
            ans = max(ans, dp[i] / 2);
            if (i - l >= 0) {
                ans = max(ans, min(dp[i], dp[i - l]));
            }
        }
        return ans;
    }
};

// int Solution::maxIncreasingSubarrays(vector<int> nums)

int main() {
    cout << "*** 100463. Adjacent Increasing Subarrays Detection II ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> nums = {2, 5, 7, 8, 9, 2, 3, 4, 3, 1};
        int ans0 = s0.maxIncreasingSubarrays(nums);
        int exp0 = 3;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> nums = {1, 2, 3, 4, 4, 4, 4, 5, 6, 7};
        int ans1 = s0.maxIncreasingSubarrays(nums);
        int exp1 = 2;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
