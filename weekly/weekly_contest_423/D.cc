// Generated by LeetCodeContestHelper at 11/10/2024, 10:20:26 AM
// 100473. Count K-Reducible Numbers Less Than N
// https://leetcode.com/contest/weekly-contest-423/problems/count-k-reducible-numbers-less-than-n/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    vector<int> cnt;
    const long long mod = (long long)1e9 + 7;
    long long dp[805][805][3];

    Solution() {
        cnt.resize(805);
        cnt[1] = 0;
        for (int i = 2; i < (int)cnt.size(); i++) {
            cnt[i] = cnt[__builtin_popcount(i)] + 1;
        }
    }

    int countKReducibleNumbers(string s, int k) {
        int n = (int)s.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int state = 0; state <= 2; state++) {
                    dp[i][j][state] = 0;
                }
            }
        }
        dp[0][1][1]++;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= i; j++) {
                for (int state = 0; state <= 2; state++) {
                    if (!dp[i - 1][j][state]) {
                        continue;
                    }
                    for (char c = '0'; c <= '1'; c++) {
                        int newState = state;
                        if (state == 1) {
                            if (c < s[i])
                                newState = 0;
                            if (c == s[i])
                                newState = 1;
                            if (c > s[i])
                                newState = 2;
                        }
                        dp[i][j + (c == '1')][newState] += dp[i - 1][j][state];
                        dp[i][j + (c == '1')][newState] %= mod;
                    }
                }
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= i + 1; j++) {
                for (int state = 0; state <= (i == n - 1 ? 0 : 2); state++) {
                    if (cnt[j] + 1 <= k) {
                        ans += dp[i][j][state];
                        ans %= mod;
                    }
                }
            }
        }
        return ans;
    }
};

// int Solution::countKReducibleNumbers(string s, int k)

int main() {
    cout << "*** 100473. Count K-Reducible Numbers Less Than N ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        string s = "111";
        int k = 1;
        int ans0 = s0.countKReducibleNumbers(s, k);
        int exp0 = 3;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        string s = "1000";
        int k = 2;
        int ans1 = s0.countKReducibleNumbers(s, k);
        int exp1 = 6;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        string s = "1";
        int k = 3;
        int ans2 = s0.countKReducibleNumbers(s, k);
        int exp2 = 0;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}
