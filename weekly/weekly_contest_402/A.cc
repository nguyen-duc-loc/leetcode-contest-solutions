// Generated by LeetCodeContestHelper at 7/11/2024, 5:00:15 PM
// 3184. Count Pairs That Form a Complete Day I
// https://leetcode.com/contest/weekly-contest-402/problems/count-pairs-that-form-a-complete-day-i/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int countCompleteDayPairs(vector<int>& hours) {
        int ans = 0, n = (int)hours.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((hours[i] + hours[j]) % 24 == 0) {
                    ans++;
                }
            }
        }
        return ans;
    }
};

// int Solution::countCompleteDayPairs(vector<int> hours)

int main() {
    cout << "*** 3184. Count Pairs That Form a Complete Day I ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> hours = {12, 12, 30, 24, 24};
        int ans0 = s0.countCompleteDayPairs(hours);
        int exp0 = 2;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> hours = {72, 48, 24, 3};
        int ans1 = s0.countCompleteDayPairs(hours);
        int exp1 = 3;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
