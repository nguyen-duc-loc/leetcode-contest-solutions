// Generated by LeetCodeContestHelper at 7/11/2024, 5:00:32 PM
// 3187. Peaks in Array
// https://leetcode.com/contest/weekly-contest-402/problems/peaks-in-array/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    vector<int> tree;

    int merge(int index, int L, int mid, int R, vector<int>& nums) {
        int ans = tree[2 * index] + tree[2 * index + 1];
        if (mid > L && nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1])
            ans++;
        if (mid + 1 < R && nums[mid + 1] > nums[mid] &&
            nums[mid + 1] > nums[mid + 2])
            ans++;
        return ans;
    }

    void build(int index, int L, int R, vector<int>& nums) {
        if (L == R) {
            return;
        }
        int mid = (L + R) / 2;
        build(2 * index, L, mid, nums);
        build(2 * index + 1, mid + 1, R, nums);
        tree[index] = merge(index, L, mid, R, nums);
    }

    void update(int index, int L, int R, int pos, vector<int>& nums) {
        if (L == R) {
            return;
        }
        int mid = (L + R) / 2;
        if (pos <= mid) {
            update(2 * index, L, mid, pos, nums);
        } else {
            update(2 * index + 1, mid + 1, R, pos, nums);
        }
        tree[index] = merge(index, L, mid, R, nums);
    }

    int query(int index, int L, int R, int l, int r, vector<int>& nums) {
        if (R < l || L > r) {
            return 0;
        }
        if (L >= l && R <= r) {
            return tree[index];
        }

        int mid = (L + R) / 2;
        int ans = query(2 * index, L, mid, l, r, nums) +
                  query(2 * index + 1, mid + 1, R, l, r, nums);
        if (mid > max(l, L) && mid < min(r, R) && nums[mid] > nums[mid - 1] &&
            nums[mid] > nums[mid + 1])
            ans++;
        if (mid + 1 > max(l, L) && mid + 1 < min(r, R) &&
            nums[mid + 1] > nums[mid] && nums[mid + 1] > nums[mid + 2])
            ans++;
        return ans;
    }

    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {
        int n = (int)nums.size();
        tree.clear();
        tree.resize(4 * n + 5);
        build(1, 0, n - 1, nums);
        vector<int> ans;
        for (auto& e : queries) {
            if (e[0] == 1) {
                ans.push_back(query(1, 0, n - 1, e[1], e[2], nums));
            } else {
                nums[e[1]] = e[2];
                update(1, 0, n - 1, e[1], nums);
            }
        }
        return ans;
    }
};

// vector<int> Solution::countOfPeaks(vector<int> nums, vector<vector<int>>
// queries)

int main() {
    cout << "*** 3187. Peaks in Array ***" << endl << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> nums = {3, 1, 4, 2, 5};
        vector<vector<int>> queries = {{2, 3, 4}, {1, 0, 4}};
        vector<int> ans0 = s0.countOfPeaks(nums, queries);
        vector<int> exp0 = {0};

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: ";
            for (int& i : ans0) {
                cout << i << " ";
            }
            cout << endl << "  Expect: ";
            for (int& i : exp0) {
                cout << i << " ";
            }
            cout << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> nums = {4, 1, 4, 2, 1, 5};
        vector<vector<int>> queries = {{2, 2, 4}, {1, 0, 2}, {1, 0, 4}};
        vector<int> ans1 = s0.countOfPeaks(nums, queries);
        vector<int> exp1 = {0, 1};

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: ";
            for (int& i : ans1) {
                cout << i << " ";
            }
            cout << endl << "  Expect: ";
            for (int& i : exp1) {
                cout << i << " ";
            }
            cout << endl;
        }
    }

    return 0;
}
