// Generated by LeetCodeContestHelper at 7/11/2024, 5:00:23 PM
// 3186. Maximum Total Damage With Spell Casting
// https://leetcode.com/contest/weekly-contest-402/problems/maximum-total-damage-with-spell-casting/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    long long maximumTotalDamage(vector<int>& power) {
        map<int, int> mp;
        for (auto& e : power) {
            mp[e]++;
        }
        power.clear();
        power.push_back(0);
        for (auto& e : mp) {
            power.push_back(e.first);
        }
        int n = (int)power.size();
        vector<long long> dp(n);
        for (int i = 1; i < n; i++) {
            auto it = lower_bound(power.begin() + 1, power.end(), power[i] - 2);
            --it;
            dp[i] = max(dp[i - 1],
                        dp[it - power.begin()] + 1LL * mp[power[i]] * power[i]);
        }
        return *ranges::max_element(dp);
    }
};

// long long Solution::maximumTotalDamage(vector<int> power)

int main() {
    cout << "*** 3186. Maximum Total Damage With Spell Casting ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> power = {1, 1, 3, 4};
        long long ans0 = s0.maximumTotalDamage(power);
        long long exp0 = 6;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> power = {7, 1, 6, 6};
        long long ans1 = s0.maximumTotalDamage(power);
        long long exp1 = 13;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
