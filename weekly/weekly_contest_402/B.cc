// Generated by LeetCodeContestHelper at 7/11/2024, 5:00:19 PM
// 3185. Count Pairs That Form a Complete Day II
// https://leetcode.com/contest/weekly-contest-402/problems/count-pairs-that-form-a-complete-day-ii/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    long long countCompleteDayPairs(vector<int>& hours) {
        long long ans = 0;
        map<int, int> mp;
        for (auto& e : hours) {
            ans += mp[(24 - e % 24) % 24];
            mp[e % 24]++;
        }
        return ans;
    }
};

// long long Solution::countCompleteDayPairs(vector<int> hours)

int main() {
    cout << "*** 3185. Count Pairs That Form a Complete Day II ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> hours = {12, 12, 30, 24, 24};
        long long ans0 = s0.countCompleteDayPairs(hours);
        long long exp0 = 2;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> hours = {72, 48, 24, 3};
        long long ans1 = s0.countCompleteDayPairs(hours);
        long long exp1 = 3;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
