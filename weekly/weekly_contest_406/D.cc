// Generated by LeetCodeContestHelper at 7/14/2024, 9:46:41 AM
// 100367. Minimum Cost for Cutting Cake II
// https://leetcode.com/contest/weekly-contest-406/problems/minimum-cost-for-cutting-cake-ii/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    long long minimumCost(int m, int n, vector<int>& horizontalCut,
                          vector<int>& verticalCut) {
        sort(horizontalCut.rbegin(), horizontalCut.rend());
        sort(verticalCut.rbegin(), verticalCut.rend());
        int cnt1 = 0, cnt2 = 0, i = 0, j = 0;
        long long ans = 0;
        while (i < (int)horizontalCut.size() && j < (int)verticalCut.size()) {
            if (horizontalCut[i] >= verticalCut[j]) {
                cnt1++;
                ans += 1LL * horizontalCut[i] * (cnt2 + 1);
                i++;
            } else {
                cnt2++;
                ans += 1LL * verticalCut[j] * (cnt1 + 1);
                j++;
            }
        }
        while (i < (int)horizontalCut.size()) {
            ans += 1LL * horizontalCut[i] * (cnt2 + 1);
            i++;
        }
        while (j < (int)verticalCut.size()) {
            ans += 1LL * verticalCut[j] * (cnt1 + 1);
            j++;
        }
        return ans;
    }
};

// long long Solution::minimumCost(int m, int n, vector<int> horizontalCut,
// vector<int> verticalCut)

int main() {
    cout << "*** 100367. Minimum Cost for Cutting Cake II ***" << endl << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        int m = 3;
        int n = 2;
        vector<int> horizontalCut = {1, 3};
        vector<int> verticalCut = {5};
        long long ans0 = s0.minimumCost(m, n, horizontalCut, verticalCut);
        long long exp0 = 13;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        int m = 2;
        int n = 2;
        vector<int> horizontalCut = {7};
        vector<int> verticalCut = {4};
        long long ans1 = s0.minimumCost(m, n, horizontalCut, verticalCut);
        long long exp1 = 15;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }
    class Solution {
       public:
        long long minimumCost(int m, int n, vector<int>& horizontalCut,
                              vector<int>& verticalCut) {
            sort(horizontalCut.rbegin(), horizontalCut.rend());
            sort(verticalCut.rbegin(), verticalCut.rend());
            int cnt1 = 0, cnt2 = 0, i = 0, j = 0;
            long long ans = 0;
            while (i < (int)horizontalCut.size() &&
                   j < (int)verticalCut.size()) {
                cout << i << " " << j << " " << cnt1 << " " << cnt2 << " "
                     << ans << "\n";
                if (horizontalCut[i] > verticalCut[j]) {
                    cnt1++;
                    ans += 1LL * horizontalCut[i] * (cnt2 + 1);
                    i++;
                } else {
                    cnt2++;
                    ans += 1LL * verticalCut[j] * (cnt1 + 1);
                    j++;
                }
            }
            while (i < (int)horizontalCut.size()) {
                ans += 1LL * horizontalCut[i] * (cnt2 + 1);
                i++;
            }
            while (j < (int)verticalCut.size()) {
                ans += 1LL * verticalCut[i] * (cnt1 + 1);
                j++;
            }
            return ans;
        }
    };

    return 0;
}
