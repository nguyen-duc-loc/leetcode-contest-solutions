// Generated by LeetCodeContestHelper at 7/14/2024, 9:32:19 AM
// 100368. Delete Nodes From Linked List Present in Array
// https://leetcode.com/contest/weekly-contest-406/problems/delete-nodes-from-linked-list-present-in-array/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) : val(x), next(next) {}
    static ListNode* create(const string& d, vector<ListNode>& nodes) {
        string s;
        int len = 0;
        for (int i = 0; i < d.size(); i++) {
            if (isalnum(d[i]) || d[i] == '-')
                s.push_back(d[i]);
            if (s.size() && (d[i] == ',' || i == d.size() - 1)) {
                nodes.push_back(stoi(s));
                len++;
                s.clear();
            }
        }
        if (!len)
            return nullptr;
        for (int i = nodes.size() - len + 1; i < nodes.size(); i++)
            nodes[i - 1].next = &nodes[i];
        return &nodes[0];
    }
    static string serialize(ListNode* head) {
        if (!head)
            return "[]";
        string s = "[";
        for (; head; head = head->next)
            s += to_string(head->val) + ',';
        s.back() = ']';
        return s;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
   public:
    ListNode* modifiedList(vector<int>& nums, ListNode* head) {
        set<int> st{nums.begin(), nums.end()};
        while (head && st.count(head->val)) {
            head = head->next;
        }
        auto t = head;
        auto t2 = head->next;
        while (t2) {
            while (t2 && st.count(t2->val)) {
                t2 = t2->next;
            }
            t->next = t2;
            t = t->next;
            if (t2)
                t2 = t2->next;
        }
        return head;
    }
};

// ListNode* Solution::modifiedList(vector<int> nums, ListNode* head)

int main() {
    cout << "*** 100368. Delete Nodes From Linked List Present in Array ***"
         << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> nums = {1, 2, 3};
        vector<ListNode> _head;
        ListNode* head = ListNode::create("[1,2,3,4,5]", _head);
        string ans0 = ListNode::serialize(s0.modifiedList(nums, head));
        string exp0 = "[4,5]";

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> nums = {1};
        vector<ListNode> _head;
        ListNode* head = ListNode::create("[1,2,1,2,1,2]", _head);
        string ans1 = ListNode::serialize(s0.modifiedList(nums, head));
        string exp1 = "[2,2,2]";

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        vector<int> nums = {5};
        vector<ListNode> _head;
        ListNode* head = ListNode::create("[1,2,3,4]", _head);
        string ans2 = ListNode::serialize(s0.modifiedList(nums, head));
        string exp2 = "[1,2,3,4]";

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}
