// Generated by LeetCodeContestHelper at 5/1/2024, 5:06:31 PM
// 3041. Maximize Consecutive Elements in an Array After Modification
// https://leetcode.com/contest/biweekly-contest-124/problems/maximize-consecutive-elements-in-an-array-after-modification/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int maxSelectedElements(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<int> dp(1000005);
        for (auto& e : nums) {
            dp[e + 1] = max(dp[e + 1], dp[e] + 1);
            dp[e] = max(dp[e], dp[e - 1] + 1);
        }
        return *max_element(dp.begin(), dp.end());
    }
};

// int Solution::maxSelectedElements(vector<int> nums)

int main() {
    cout << "*** 3041. Maximize Consecutive Elements in an Array After "
            "Modification ***"
         << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> nums = {2, 1, 5, 1, 1};
        int ans0 = s0.maxSelectedElements(nums);
        int exp0 = 3;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> nums = {1, 4, 7, 10};
        int ans1 = s0.maxSelectedElements(nums);
        int exp1 = 1;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
