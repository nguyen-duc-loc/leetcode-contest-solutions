// Generated by LeetCodeContestHelper at 5/1/2024, 5:06:21 PM
// 3038. Maximum Number of Operations With the Same Score I
// https://leetcode.com/contest/biweekly-contest-124/problems/maximum-number-of-operations-with-the-same-score-i/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
 public:
  int maxOperations(vector<int>& nums) {
    int ans = 0;
    reverse(nums.begin(), nums.end());
    int n = (int)nums.size();
    int t = nums[n - 1] + nums[n - 2];
    while (nums.size() >= 2) {
      n = (int)nums.size();
      int x = nums[n - 1] + nums[n - 2];
      if (x == t) {
        ans++;
      } else {
        break;
      }
      nums.pop_back();
      nums.pop_back();
    }
    return ans;
  }
};

// int Solution::maxOperations(vector<int> nums)

int main() {
  cout << "*** 3038. Maximum Number of Operations With the Same Score I ***"
       << endl
       << endl;

  Solution s0;

  {
    cout << "Test 1: ";

    vector<int> nums = {3, 2, 1, 4, 5};
    int ans0 = s0.maxOperations(nums);
    int exp0 = 2;

    if (ans0 == exp0) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: " << ans0 << endl;
      cout << "  Expect: " << exp0 << endl;
    }
  }

  {
    cout << "Test 2: ";

    vector<int> nums = {3, 2, 6, 1, 4};
    int ans1 = s0.maxOperations(nums);
    int exp1 = 1;

    if (ans1 == exp1) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: " << ans1 << endl;
      cout << "  Expect: " << exp1 << endl;
    }
  }

  return 0;
}
