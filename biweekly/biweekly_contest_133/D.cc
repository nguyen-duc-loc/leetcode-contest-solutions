// Generated by LeetCodeContestHelper at 6/22/2024, 10:25:13 PM
// 100333. Count the Number of Inversions
// https://leetcode.com/contest/biweekly-contest-133/problems/count-the-number-of-inversions/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    long long dp[305][405];
    const long long mod = (long long)1e9 + 7;

    int numberOfPermutations(int n, vector<vector<int>>& requirements) {
        memset(dp, 0, sizeof(dp));
        vector<int> v(n + 1, -1);
        for (auto& e : requirements) {
            v[e[0] + 1] = e[1];
        }
        dp[1][0] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j <= 400; j++) {
                for (int k = 1; k <= i; k++) {
                    if (j >= i - k) {
                        dp[i][j] += dp[i - 1][j - (i - k)];
                        dp[i][j] %= mod;
                    }
                }
            }
            for (int j = 0; j <= 400; j++) {
                if (v[i] != -1 && v[i] != j) {
                    dp[i][j] = 0;
                }
            }
        }
        return dp[n][v[n]];
    }
};

// int Solution::numberOfPermutations(int n, vector<vector<int>> requirements)

int main() {
    cout << "*** 100333. Count the Number of Inversions ***" << endl << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        int n = 3;
        vector<vector<int>> requirements = {{2, 2}, {0, 0}};
        int ans0 = s0.numberOfPermutations(n, requirements);
        int exp0 = 2;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        int n = 3;
        vector<vector<int>> requirements = {{2, 2}, {1, 1}, {0, 0}};
        int ans1 = s0.numberOfPermutations(n, requirements);
        int exp1 = 1;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        int n = 2;
        vector<vector<int>> requirements = {{0, 0}, {1, 0}};
        int ans2 = s0.numberOfPermutations(n, requirements);
        int exp2 = 1;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}
