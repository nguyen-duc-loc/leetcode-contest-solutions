// Generated by LeetCodeContestHelper at 4/30/2024, 3:54:45 AM
// 3127. Make a Square with the Same Color
// https://leetcode.com/contest/biweekly-contest-129/problems/make-a-square-with-the-same-color/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
 public:
  bool ok(vector<vector<char>>& grid) {
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < 2; j++) {
        bool ok = 1;
        auto c = grid[i][j];
        if (grid[i + 1][j] != c || grid[i][j + 1] != c ||
            grid[i + 1][j + 1] != c) {
          ok = 0;
        }
        if (ok)
          return true;
      }
    }
    return false;
  }

  bool canMakeSquare(vector<vector<char>>& grid) {
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (ok(grid)) {
          return true;
        }
        if (grid[i][j] == 'B') {
          grid[i][j] = 'W';
          if (ok(grid)) {
            return true;
          }
          grid[i][j] = 'B';
        } else {
          grid[i][j] = 'B';
          if (ok(grid)) {
            return true;
          }
          grid[i][j] = 'W';
        }
      }
    }
    return false;
  }
};

// bool Solution::canMakeSquare(vector<vector<char>> grid)

int main() {
  cout << "*** 3127. Make a Square with the Same Color ***" << endl << endl;

  Solution s0;

  {
    cout << "Test 1: ";

    vector<vector<char>> grid = {
        {'B', 'W', 'B'}, {'B', 'W', 'W'}, {'B', 'W', 'B'}};
    bool ans0 = s0.canMakeSquare(grid);
    bool exp0 = true;

    if (ans0 == exp0) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: " << ans0 << endl;
      cout << "  Expect: " << exp0 << endl;
    }
  }

  {
    cout << "Test 2: ";

    vector<vector<char>> grid = {
        {'B', 'W', 'B'}, {'W', 'B', 'W'}, {'B', 'W', 'B'}};
    bool ans1 = s0.canMakeSquare(grid);
    bool exp1 = false;

    if (ans1 == exp1) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: " << ans1 << endl;
      cout << "  Expect: " << exp1 << endl;
    }
  }

  {
    cout << "Test 3: ";

    vector<vector<char>> grid = {
        {'B', 'W', 'B'}, {'B', 'W', 'W'}, {'B', 'W', 'W'}};
    bool ans2 = s0.canMakeSquare(grid);
    bool exp2 = true;

    if (ans2 == exp2) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: " << ans2 << endl;
      cout << "  Expect: " << exp2 << endl;
    }
  }

  return 0;
}
