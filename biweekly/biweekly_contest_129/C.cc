// Generated by LeetCodeContestHelper at 4/30/2024, 3:55:10 AM
// 3129. Find All Possible Stable Binary Arrays I
// https://leetcode.com/contest/biweekly-contest-129/problems/find-all-possible-stable-binary-arrays-i/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int numberOfStableArrays(int zero, int one, int limit) {
        const long long mod = (long long)1e9 + 7;
        vector<vector<vector<long long>>> dp(
            zero + 1, vector<vector<long long>>(one + 1, vector<long long>(2)));
        vector<vector<long long>> pref1(zero + 1, vector<long long>(one + 1));
        vector<vector<long long>> pref2(zero + 1, vector<long long>(one + 1));
        dp[0][0][0] = dp[0][0][1] = 1;
        for (int i = 0; i <= zero; i++) {
            for (int j = 0; j <= one; j++) {
                if (i >= 1)
                    pref1[i][j] = pref1[i - 1][j];
                if (j >= 1)
                    pref2[i][j] = pref2[i][j - 1];
                if (i >= 1) {
                    dp[i][j][0] += pref1[i - 1][j];
                }
                dp[i][j][0] %= mod;
                if (i - limit > 0) {
                    dp[i][j][0] += mod - pref1[i - limit - 1][j];
                }
                dp[i][j][0] %= mod;
                if (j >= 1) {
                    dp[i][j][1] += pref2[i][j - 1];
                }
                dp[i][j][1] %= mod;
                if (j - limit > 0) {
                    dp[i][j][1] += mod - pref2[i][j - limit - 1];
                }
                dp[i][j][1] %= mod;
                pref1[i][j] += dp[i][j][1];
                pref1[i][j] %= mod;
                pref2[i][j] += dp[i][j][0];
                pref2[i][j] %= mod;
            }
        }
        return (dp[zero][one][0] + dp[zero][one][1]) % mod;
    }
};

// int Solution::numberOfStableArrays(int zero, int one, int limit)

int main() {
    cout << "*** 3129. Find All Possible Stable Binary Arrays I ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        int zero = 1;
        int one = 1;
        int limit = 2;
        int ans0 = s0.numberOfStableArrays(zero, one, limit);
        int exp0 = 2;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        int zero = 1;
        int one = 2;
        int limit = 1;
        int ans1 = s0.numberOfStableArrays(zero, one, limit);
        int exp1 = 1;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        int zero = 3;
        int one = 3;
        int limit = 2;
        int ans2 = s0.numberOfStableArrays(zero, one, limit);
        int exp2 = 14;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}
