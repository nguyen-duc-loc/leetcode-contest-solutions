// Generated by LeetCodeContestHelper at 5/1/2024, 8:54:18 AM
// 2931. Maximum Spending After Buying Items
// https://leetcode.com/contest/biweekly-contest-117/problems/maximum-spending-after-buying-items/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
 public:
  long long maxSpending(vector<vector<int>>& values) {
    int m = (int)values.size();
    int n = (int)values[0].size();
    vector<int> v;
    for (auto& e : values) {
      for (auto& x : e) {
        v.push_back(x);
      }
    }
    sort(v.begin(), v.end());
    int d = 1;
    long long ans = 0;
    for (auto& e : v) {
      ans += 1LL * e * (d++);
    }
    return ans;
  }
};

// long long Solution::maxSpending(vector<vector<int>> values)

int main() {
  cout << "*** 2931. Maximum Spending After Buying Items ***" << endl << endl;

  Solution s0;

  {
    cout << "Test 1: ";

    vector<vector<int>> values = {{8, 5, 2}, {6, 4, 1}, {9, 7, 3}};
    long long ans0 = s0.maxSpending(values);
    long long exp0 = 285;

    if (ans0 == exp0) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: " << ans0 << endl;
      cout << "  Expect: " << exp0 << endl;
    }
  }

  {
    cout << "Test 2: ";

    vector<vector<int>> values = {{10, 8, 6, 4, 2}, {9, 7, 5, 3, 2}};
    long long ans1 = s0.maxSpending(values);
    long long exp1 = 386;

    if (ans1 == exp1) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
      cout << "  Answer: " << ans1 << endl;
      cout << "  Expect: " << exp1 << endl;
    }
  }

  return 0;
}
