// Generated by LeetCodeContestHelper at 10/12/2024, 10:58:44 PM
// 100450. Find the Number of Possible Ways for an Event
// https://leetcode.com/contest/biweekly-contest-141/problems/find-the-number-of-possible-ways-for-an-event/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    long long dp[1005][1005];
    const long long mod = (long long)1e9 + 7;

    long long power(long long a, long long b) {
        long long ans = 1;
        while (b) {
            if (b & 1) {
                ans *= a;
                ans %= mod;
            }
            a *= a;
            a %= mod;
            b >>= 1;
        }
        return ans;
    }

    int numberOfWays(int n, int x, int y) {
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= x; j++) {
                dp[i][j] += (dp[i - 1][j] * j) % mod;
                dp[i][j] %= mod;
                dp[i][j] += (dp[i - 1][j - 1] * (x - j + 1)) % mod;
                dp[i][j] %= mod;
            }
        }
        long long ans = 0;
        for (int i = 1; i <= x; i++) {
            ans += (dp[n][i] * power(1LL * y, 1LL * i)) % mod;
            ans %= mod;
        }
        return ans;
    }
};

// int Solution::numberOfWays(int n, int x, int y)

int main() {
    cout << "*** 100450. Find the Number of Possible Ways for an Event ***"
         << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        int n = 1;
        int x = 2;
        int y = 3;
        int ans0 = s0.numberOfWays(n, x, y);
        int exp0 = 6;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        int n = 5;
        int x = 2;
        int y = 1;
        int ans1 = s0.numberOfWays(n, x, y);
        int exp1 = 32;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        int n = 3;
        int x = 3;
        int y = 4;
        int ans2 = s0.numberOfWays(n, x, y);
        int exp2 = 684;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}