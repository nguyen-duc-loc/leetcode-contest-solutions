// Generated by LeetCodeContestHelper at 10/12/2024, 9:55:29 PM
// 100355. Find Maximum Removals From Source String
// https://leetcode.com/contest/biweekly-contest-141/problems/find-maximum-removals-from-source-string/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int maxRemovals(string source, string pattern, vector<int>& targetIndices) {
        int m = (int)source.size(), n = (int)pattern.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));
        set<int> st;
        for (auto& e : targetIndices) {
            st.insert(e);
        }
        dp[0][0] = 0;
        for (int i = 1; i <= m; i++) {
            dp[i][0] = dp[i - 1][0];
            if (st.count(i - 1)) {
                dp[i][0] = dp[i - 1][0] + 1;
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = dp[i - 1][j];
                if (source[i - 1] == pattern[j - 1]) {
                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1]);
                    if (st.count(i - 1) && dp[i - 1][j] != -1) {
                        dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1);
                    }
                } else {
                    if (st.count(i - 1) && dp[i - 1][j] != -1) {
                        dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1);
                    }
                }
            }
        }
        return dp[m][n];
    }
};

// int Solution::maxRemovals(string source, string pattern, vector<int>
// targetIndices)

int main() {
    cout << "*** 100355. Find Maximum Removals From Source String ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        string source = "abbaa";
        string pattern = "aba";
        vector<int> targetIndices = {0, 1, 2};
        int ans0 = s0.maxRemovals(source, pattern, targetIndices);
        int exp0 = 1;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        string source = "bcda";
        string pattern = "d";
        vector<int> targetIndices = {0, 3};
        int ans1 = s0.maxRemovals(source, pattern, targetIndices);
        int exp1 = 2;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        string source = "dda";
        string pattern = "dda";
        vector<int> targetIndices = {0, 1, 2};
        int ans2 = s0.maxRemovals(source, pattern, targetIndices);
        int exp2 = 0;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    {
        cout << "Test 4: ";

        string source = "yeyeykyded";
        string pattern = "yeyyd";
        vector<int> targetIndices = {0, 2, 3, 4};
        int ans3 = s0.maxRemovals(source, pattern, targetIndices);
        int exp3 = 2;

        if (ans3 == exp3) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans3 << endl;
            cout << "  Expect: " << exp3 << endl;
        }
    }

    return 0;
}