// Generated by LeetCodeContestHelper at 7/8/2024, 11:23:22 AM
// 3209. Number of Subarrays With AND Value of K
// https://leetcode.com/contest/biweekly-contest-134/problems/number-of-subarrays-with-and-value-of-k/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

template <class T = int>
struct sparseTable {  // 0-indexed
    T op(T a, T b) {
        return a & b;
    }

    int n;
    vector<vector<T>> st;

    sparseTable() {}

    sparseTable(vector<T> v) {
        n = v.size();
        st = vector<vector<T>>(__lg(n) + 1, vector<T>(n));
        st[0] = v;
        for (int i = 1; i < st.size(); i++) {
            for (int j = 0; j + (1 << i) <= n; j++)
                st[i][j] = op(st[i - 1][j], st[i - 1][j + (1 << (i - 1))]);
        }
    }

    T query(int l, int r) {  // inclusive range
        int sz = __lg(r - l + 1);
        return op(st[sz][l], st[sz][r - (1 << sz) + 1]);
    }
};

class Solution {
   public:
    long long query(int k, vector<int>& nums) {
        sparseTable st(nums);
        long long ans = 0;
        int n = (int)nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i] < k)
                continue;
            int low = i, high = n - 1, r;
            while (low <= high) {
                int mid = (low + high) / 2;
                if (st.query(i, mid) >= k) {
                    r = mid;
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
            ans += (r - i + 1);
        }
        return ans;
    }

    long long countSubarrays(vector<int>& nums, int k) {
        return query(k, nums) - query(k + 1, nums);
    }
};

// long long Solution::countSubarrays(vector<int> nums, int k)

int main() {
    cout << "*** 3209. Number of Subarrays With AND Value of K ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> nums = {1, 1, 1};
        int k = 1;
        long long ans0 = s0.countSubarrays(nums, k);
        long long exp0 = 6;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> nums = {1, 1, 2};
        int k = 1;
        long long ans1 = s0.countSubarrays(nums, k);
        long long exp1 = 3;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        vector<int> nums = {1, 2, 3};
        int k = 2;
        long long ans2 = s0.countSubarrays(nums, k);
        long long exp2 = 2;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}
