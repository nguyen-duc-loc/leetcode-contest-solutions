// Generated by LeetCodeContestHelper at 7/8/2024, 11:23:07 AM
// 3206. Alternating Groups I
// https://leetcode.com/contest/biweekly-contest-134/problems/alternating-groups-i/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int numberOfAlternatingGroups(vector<int>& colors) {
        int n = (int)colors.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (colors[(i + 1) % n] != colors[i] &&
                colors[(i + n - 1) % n] != colors[i]) {
                ans++;
            }
        }
        return ans;
    }
};

// int Solution::numberOfAlternatingGroups(vector<int> colors)

int main() {
    cout << "*** 3206. Alternating Groups I ***" << endl << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> colors = {1, 1, 1};
        int ans0 = s0.numberOfAlternatingGroups(colors);
        int exp0 = 0;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> colors = {0, 1, 0, 0, 1};
        int ans1 = s0.numberOfAlternatingGroups(colors);
        int exp1 = 3;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
