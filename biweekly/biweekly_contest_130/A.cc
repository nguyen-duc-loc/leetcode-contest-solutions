// Generated by LeetCodeContestHelper at 5/11/2024, 9:30:24 PM
// 100299. Check if Grid Satisfies Conditions
// https://leetcode.com/contest/biweekly-contest-130/problems/check-if-grid-satisfies-conditions/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    bool satisfiesConditions(vector<vector<int>>& grid) {
        bool ans = 1;
        int m = (int)grid.size(), n = (int)grid[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i < m - 1 && grid[i + 1][j] != grid[i][j]) {
                    ans = 0;
                }
                if (j < n - 1 && grid[i][j + 1] == grid[i][j]) {
                    ans = 0;
                }
            }
        }
        return ans;
    }
};

// bool Solution::satisfiesConditions(vector<vector<int>> grid)

int main() {
    cout << "*** 100299. Check if Grid Satisfies Conditions ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<vector<int>> grid = {{1, 0, 2}, {1, 0, 2}};
        bool ans0 = s0.satisfiesConditions(grid);
        bool exp0 = true;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<vector<int>> grid = {{1, 1, 1}, {0, 0, 0}};
        bool ans1 = s0.satisfiesConditions(grid);
        bool exp1 = false;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        vector<vector<int>> grid = {{1}, {2}, {3}};
        bool ans2 = s0.satisfiesConditions(grid);
        bool exp2 = false;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}
