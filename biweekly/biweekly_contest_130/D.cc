// Generated by LeetCodeContestHelper at 5/12/2024, 5:27:29 AM
// 3145. Find Products of Elements of Big Array
// https://leetcode.com/contest/biweekly-contest-130/problems/find-products-of-elements-of-big-array/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    long long count(long long n) {
        if (n <= 1) {
            return n;
        }
        long long c = (long long)__builtin_clzll(n);
        long long a = 63 - c;
        return a * (1LL << (a - 1)) + (n - (1LL << a) + 1) +
               count(n - (1LL << a));
    }

    long long findNum(long long n) {
        long long low = 1, high = (long long)1e15, ans = -1;
        while (low <= high) {
            long long mid = (low + high) / 2;
            long long c = count(mid);
            if (c >= n) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    long long calc(long long n) {
        if (n <= 1) {
            return 0;
        }
        long long c = (long long)__builtin_clzll(n);
        long long a = 63 - c;
        return a * (a - 1) * (1LL << (a - 1)) / 2 + a * (n - (1LL << a) + 1) +
               calc(n - (1LL << a));
    }

    long long pref(long long index) {
        long long num = findNum(index);
        long long c = count(num - 1);
        long long ans = calc(num - 1);
        long long left = index - c;
        long long i = 0;
        while (left) {
            if (num & (1LL << i)) {
                left--;
                ans += i;
            }
            i++;
        }
        return ans;
    }

    long long pow(long long a, long long b, long long mod) {
        if (b == 0) {
            return 1 % mod;
        }
        long long ans = 1;
        while (b) {
            if (b & 1) {
                ans *= a;
                ans %= mod;
            }
            a *= a;
            a %= mod;
            b >>= 1;
        }
        return ans;
    }

    vector<int> findProductsOfElements(vector<vector<long long>>& queries) {
        vector<int> ans;
        for (auto& e : queries) {
            long long from = e[0], to = e[1], mod = e[2];
            ans.push_back(pow(2LL, pref(to + 1) - pref(from), mod));
        }
        return ans;
    }
};

// vector<int> Solution::findProductsOfElements(vector<vector<long long>>
// queries)

int main() {
    cout << "*** 3145. Find Products of Elements of Big Array ***" << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<vector<long long>> queries = {{1, 3, 7}};
        vector<int> ans0 = s0.findProductsOfElements(queries);
        vector<int> exp0 = {4};

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: ";
            for (int& i : ans0) {
                cout << i << " ";
            }
            cout << endl << "  Expect: ";
            for (int& i : exp0) {
                cout << i << " ";
            }
            cout << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<vector<long long>> queries = {{2, 5, 3}, {7, 7, 4}};
        vector<int> ans1 = s0.findProductsOfElements(queries);
        vector<int> exp1 = {2, 2};

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: ";
            for (int& i : ans1) {
                cout << i << " ";
            }
            cout << endl << "  Expect: ";
            for (int& i : exp1) {
                cout << i << " ";
            }
            cout << endl;
        }
    }

    return 0;
}
