// Generated by LeetCodeContestHelper at 5/11/2024, 9:37:34 PM
// 100302. Maximum Points Inside the Square
// https://leetcode.com/contest/biweekly-contest-130/problems/maximum-points-inside-the-square/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int maxPointsInsideSquare(vector<vector<int>>& points, string s) {
        vector<pair<pair<int, int>, char>> v;
        int n = (int)points.size();
        set<int> st;
        for (int i = 0; i < n; i++) {
            v.emplace_back(make_pair(abs(points[i][0]), abs(points[i][1])),
                           s[i]);
            st.insert(abs(points[i][0]));
            st.insert(abs(points[i][1]));
        }
        sort(v.begin(), v.end());
        set<pair<int, char>> st2;
        int cur = 0, ans = 0;
        priority_queue<pair<int, char>, vector<pair<int, char>>,
                       greater<pair<int, char>>>
            pq;
        set<char> vis;
        for (auto e : st) {
            while (cur < n && v[cur].first.first <= e) {
                pq.push({v[cur].first.second, v[cur].second});
                cur++;
            }
            bool ok = 1;
            int c = 0;
            while (!pq.empty() && pq.top().first <= e) {
                auto t = pq.top();
                pq.pop();
                if (vis.count(t.second)) {
                    ok = 0;
                    break;
                }
                vis.insert(t.second);
                c++;
            }
            if (ok) {
                ans += c;
            } else {
                break;
            }
        }
        return ans;
    }
};

// int Solution::maxPointsInsideSquare(vector<vector<int>> points, string s)

int main() {
    cout << "*** 100302. Maximum Points Inside the Square ***" << endl << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<vector<int>> points = {
            {2, 2}, {-1, -2}, {-4, 4}, {-3, 1}, {3, -3}};
        string s = "abdca";
        int ans0 = s0.maxPointsInsideSquare(points, s);
        int exp0 = 2;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<vector<int>> points = {{1, 1}, {-2, -2}, {-2, 2}};
        string s = "abb";
        int ans1 = s0.maxPointsInsideSquare(points, s);
        int exp1 = 1;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    {
        cout << "Test 3: ";

        vector<vector<int>> points = {{1, 1}, {-1, -1}, {2, -2}};
        string s = "ccd";
        int ans2 = s0.maxPointsInsideSquare(points, s);
        int exp2 = 0;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    {
        cout << "Test 4: ";

        vector<vector<int>> points = {{-6, -4}, {8, -1}, {3, 9}};
        string s = "ccc";
        int ans2 = s0.maxPointsInsideSquare(points, s);
        int exp2 = 1;

        if (ans2 == exp2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans2 << endl;
            cout << "  Expect: " << exp2 << endl;
        }
    }

    return 0;
}
