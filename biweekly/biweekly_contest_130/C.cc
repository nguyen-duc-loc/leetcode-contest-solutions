// Generated by LeetCodeContestHelper at 5/11/2024, 10:12:23 PM
// 100289. Minimum Substring Partition of Equal Character Frequency
// https://leetcode.com/contest/biweekly-contest-130/problems/minimum-substring-partition-of-equal-character-frequency/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int minimumSubstringsInPartition(string s) {
        int n = (int)s.size();
        vector<vector<int>> pref(n + 1, vector<int>(26));
        for (int i = 1; i <= n; i++) {
            pref[i] = pref[i - 1];
            pref[i][s[i - 1] - 'a']++;
        }
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                int c = -1;
                bool ok = 1;
                for (int k = 0; k < 26; k++) {
                    int a = pref[i][k] - pref[j][k];
                    if (a == 0)
                        continue;
                    if (c == -1) {
                        c = a;
                    } else {
                        if (a != c) {
                            ok = 0;
                        }
                    }
                }
                if (ok && dp[j] != INT_MAX) {
                    dp[i] = min(dp[i], dp[j] + 1);
                }
            }
        }
        return dp[n];
    }
};

// int Solution::minimumSubstringsInPartition(string s)

int main() {
    cout << "*** 100289. Minimum Substring Partition of Equal Character "
            "Frequency ***"
         << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        string s = "fabccddg";
        int ans0 = s0.minimumSubstringsInPartition(s);
        int exp0 = 3;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        string s = "abababaccddb";
        int ans1 = s0.minimumSubstringsInPartition(s);
        int exp1 = 2;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
