// Generated by LeetCodeContestHelper at 6/8/2024, 10:24:58 PM
// 100327. Find the Maximum Length of a Good Subsequence II
// https://leetcode.com/contest/biweekly-contest-132/problems/find-the-maximum-length-of-a-good-subsequence-ii/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    map<int, int> mp;

    int query(vector<int>& trees, int L, int R, int l, int r, int index) {
        if (R < l || L > r) {
            return 0;
        }
        if (L >= l && R <= r) {
            return trees[index];
        }
        int mid = (L + R) / 2;
        return max(query(trees, L, mid, l, r, 2 * index),
                   query(trees, mid + 1, R, l, r, 2 * index + 1));
    }

    void update(vector<int>& trees, int L, int R, int pos, int val, int index) {
        if (L == R) {
            trees[index] = val;
            return;
        }
        int mid = (L + R) / 2;
        if (pos <= mid)
            update(trees, L, mid, pos, val, 2 * index);
        else
            update(trees, mid + 1, R, pos, val, 2 * index + 1);
        trees[index] = max(trees[2 * index], trees[2 * index + 1]);
    }

    int maximumLength(vector<int>& nums, int k) {
        mp.clear();
        int n = (int)nums.size();
        for (int i = 0; i < n; i++) {
            mp[nums[i]]++;
        }
        int index = 0;
        for (auto& e : mp) {
            e.second = index;
            index++;
        }
        vector<vector<int>> trees(k + 1, vector<int>(4 * index + 5));
        for (int i = 0; i < n; i++) {
            auto pos = mp[nums[i]];
            for (int j = 0; j <= k; j++) {
                int mx = query(trees[j], 0, index - 1, pos, pos, 1);
                update(trees[j], 0, index - 1, pos, mx + 1, 1);
            }
            for (int j = 0; j < k; j++) {
                int mx1 = query(trees[j + 1], 0, index - 1, pos, pos, 1);
                int mx2 = query(trees[j], 0, index - 1, 0, pos - 1, 1);
                int mx3 = query(trees[j], 0, index - 1, pos + 1, index - 1, 1);
                update(trees[j + 1], 0, index - 1, pos,
                       max(max(mx2, mx3) + 1, mx1), 1);
            }
        }
        int ans = 0;
        for (int i = 0; i <= k; i++) {
            ans = max(ans, trees[i][1]);
        }
        return ans;
    }
};

// int Solution::maximumLength(vector<int> nums, int k)

int main() {
    cout << "*** 100327. Find the Maximum Length of a Good Subsequence II ***"
         << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> nums = {1, 2, 1, 1, 3};
        int k = 2;
        int ans0 = s0.maximumLength(nums, k);
        int exp0 = 4;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> nums = {1, 2, 3, 4, 5, 1};
        int k = 0;
        int ans1 = s0.maximumLength(nums, k);
        int exp1 = 2;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
