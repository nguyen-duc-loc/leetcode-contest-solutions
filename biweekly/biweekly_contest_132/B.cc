// Generated by LeetCodeContestHelper at 6/8/2024, 9:39:15 PM
// 100297. Find The First Player to win K Games in a Row
// https://leetcode.com/contest/biweekly-contest-132/problems/find-the-first-player-to-win-k-games-in-a-row/

#define _USE_MATH_DEFINES
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

class Solution {
   public:
    int findWinningPlayer(vector<int>& skills, int k) {
        int n = (int)skills.size();
        if (k >= n) {
            return max_element(skills.begin(), skills.end()) - skills.begin();
        }
        set<pair<int, int>> st;
        vector<bool> ok(n);
        int mx = INT_MIN;
        for (int i = 0; i < n; i++) {
            mx = max(mx, skills[i]);
            if (mx == skills[i]) {
                ok[i] = 1;
            }
        }
        int ans = n;
        for (int i = n - 1; i >= 0; i--) {
            if (!ok[i])
                continue;
            auto it = st.upper_bound({skills[i], i});
            if (it == st.end()) {
                ans = i;
            } else {
                int cnt = (i > 0) + it->second - i - 1;
                if (cnt >= k) {
                    ans = i;
                }
            }
            st.insert({skills[i], i});
        }
        return ans;
    }
};

// int Solution::findWinningPlayer(vector<int> skills, int k)

int main() {
    cout << "*** 100297. Find The First Player to win K Games in a Row ***"
         << endl
         << endl;

    Solution s0;

    {
        cout << "Test 1: ";

        vector<int> skills = {4, 2, 6, 3, 9};
        int k = 2;
        int ans0 = s0.findWinningPlayer(skills, k);
        int exp0 = 2;

        if (ans0 == exp0) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans0 << endl;
            cout << "  Expect: " << exp0 << endl;
        }
    }

    {
        cout << "Test 2: ";

        vector<int> skills = {2, 5, 4};
        int k = 3;
        int ans1 = s0.findWinningPlayer(skills, k);
        int exp1 = 1;

        if (ans1 == exp1) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
            cout << "  Answer: " << ans1 << endl;
            cout << "  Expect: " << exp1 << endl;
        }
    }

    return 0;
}
